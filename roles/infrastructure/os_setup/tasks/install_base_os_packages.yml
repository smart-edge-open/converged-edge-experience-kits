# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- debug:
    msg: "Installing the following packages: {{ os_yum_base_packages if ansible_distribution == 'CentOS' else os_ubuntu_base_packages }}"

- name: install IUS repository
  yum:
    name: https://repo.ius.io/ius-release-el7.rpm
    state: present
  become: yes
  when: 
     - not offline_enable
     - ansible_distribution == "CentOS"

- name: Set empty local_pip var
  set_fact:
    local_pip: ""
  when: not offline_enable

- name: Check if offline mode
  set_fact:
    local_pip: "--no-index --find-links=https://{{ hostvars[groups['controller_group'][0]]['ansible_host'] }} \
                --trusted-host {{ hostvars[groups['controller_group'][0]]['ansible_host'] }}"
    _openssl_url: "https://{{ hostvars[groups['controller_group'][0]]['ansible_host'] }}/{{ _openssl_package_name }}.tar.gz"
  when: offline_enable

- name: install Python 2 and pip2 on Ubuntu
  block:
  - name: install Python 2 on Ubuntu
    apt:
      name: python2
      state: present
      update_cache: yes
    become: yes
    when: ansible_distribution == "Ubuntu"
  
  - name: download pip2 on Ubuntu
    get_url:
      url: https://bootstrap.pypa.io/pip/2.7/get-pip.py
      dest: /home/openness/get-pip.py
      mode: '0777'
    become: yes
    when: ansible_distribution == "Ubuntu"
  
  - name: Install pip2 in Ubuntu
    command: python2 /home/openness/get-pip.py
    become: yes
    when: ansible_distribution == "Ubuntu"

- name: install base OS rpm packages
  yum:
    name: "{{ os_yum_base_packages }}"
    state: present
    enablerepo: "{{ omit if offline_enable else 'ius-archive' }}"
    skip_broken: yes
  become: yes
  when: ansible_distribution == "CentOS"

- name: install base OS Ubuntu packages
  apt:
    name: "{{ os_ubuntu_base_packages }}"
    state: present
    update_cache: yes
  become: yes
  when: ansible_distribution == "Ubuntu"

- name: upgrade python2-pip version
  command: "python2 -m pip install {{ local_pip }} --upgrade pip=={{ _pip_version }}"
  register: result
  retries: 3
  delay: 10
  until: result is succeeded
  changed_when: true
  become: yes
  when: ansible_distribution == "CentOS"  

- name: get installed OpenSSL version
  command: "openssl version"
  ignore_errors: yes
  register: installed_openssl_version
  changed_when: false

- name: install base OpenSSL from sources
  block:
    - name: OpenSSL create temp dir
      tempfile:
        state: directory
        suffix: -OpenSSL
      register: tmp_dir

    - name: OpenSSL download from {{ _openssl_url }}
      get_url:
        url: "{{ _openssl_url }}"
        dest: "{{ tmp_dir.path }}"
        checksum: "sha256:{{ _openssl_checksum_sha256 }}"
      register: result
      retries: "{{ number_of_retries  }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"

    - name: OpenSSL extract
      unarchive:
        src: "{{ tmp_dir.path }}/{{ _openssl_package_name }}.tar.gz"
        dest: "{{ tmp_dir.path }}"
        remote_src: yes

    - name: OpenSSL build and install
      shell: >
        ./config &&
        make -j `nproc` > /dev/null &&
        make install > /dev/null
      become: yes
      args:
        chdir: "{{ tmp_dir.path }}/{{ _openssl_package_name }}"

    - name: OpenSSL create ld config
      copy:
        dest: "/etc/ld.so.conf.d/localuser.conf"
        content: "/usr/local/lib64"
      become: yes

    - name: OpenSSL reload ld configs
      command: "ldconfig -v"
      become: yes

    - name: OpenSSL remove temporary directory
      file:
        path: "{{ tmp_dir.path }}"
        state: absent
  when: _openssl_version|string not in installed_openssl_version.stdout.split()

- name: add bash-completion to bashrc on Ubuntu
  lineinfile:
    path: /etc/bash.bashrc
    line: "source /usr/share/bash-completion/bash_completion"
  become: yes
