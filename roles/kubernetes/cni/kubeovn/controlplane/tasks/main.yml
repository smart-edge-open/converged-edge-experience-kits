# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2019-2020 Intel Corporation

---
- name: include dpdk role
  include_role:
    name: infrastructure/dpdk
  when: kubeovn_dpdk and single_node_deployment | default(false)

- name: open kube-ovn firewall rules
  ignore_errors: yes
  firewalld:
    port: "{{ item }}"
    permanent: yes
    state: enabled
    immediate: yes
  with_items:
    - 6641/tcp
    - 6642/tcp
    - 6081/udp
  become: yes
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/python3' if ansible_distribution == 'Ubuntu' else '/usr/bin/python2' }}"

- name: Check if kube-ovn kubectl plugin exists
  stat:
    path: /usr/local/bin/kubectl-ko
  register: kube_ovn_plugin_file

- name: install kubeovn
  block:
    - name: Creates kubeovn directory
      file:
        path: "{{ _kubeovn_destdir }}"
        state: directory

    - name: download kubeovn files
      get_url:
        url: "{{ item }}"
        dest: "{{ _kubeovn_destdir }}"
      register: result
      retries: "{{ number_of_retries }}"
      until: result is succeeded
      delay: "{{ retry_delay }}"
      with_items: "{{ _kubeovn_download_files }}"

    - name: create patch file for install.sh from template
      template:
        src: "{{ _kubeovn_install_patch_file }}.j2"
        dest: "{{ _kubeovn_destdir }}/{{ _kubeovn_install_patch_file }}"

    - name: apply patch for install.sh
      patch:
        src: "{{ _kubeovn_destdir }}/{{ _kubeovn_install_patch_file }}"
        dest: "{{ _kubeovn_destdir }}/install.sh"
        basedir: "{{ _kubeovn_destdir }}"
        remote_src: yes

    - name: install kube-ovn with DPDK support
      command: bash install.sh --with-dpdk=19.11
      args:
        chdir: "{{ _kubeovn_destdir }}"
      when: kubeovn_dpdk
      become: yes

    - name: install kube-ovn
      command: bash install.sh
      args:
        chdir: "{{ _kubeovn_destdir }}"
      when: not kubeovn_dpdk
      become: yes
  when: not kube_ovn_plugin_file.stat.exists or
        (kube_ovn_plugin_file.stat.executable is defined and not kube_ovn_plugin_file.stat.executable)

- name: Wait till k8s master starts
  shell: >
    set -o pipefail &&
    kubectl get nodes {{ node_name }} | awk '$2=="Ready"'
  args:
  register: k8s_master_init_start
  retries: 30
  delay: 10
  until: k8s_master_init_start.rc == 0
  changed_when: false

- name: create temp crd_local.yml
  template:
    src: crd_local.yml.j2
    dest: "{{ openness_dir }}/crd_local.yml"

- name: apply CRD defining local subnet
  command: "kubectl apply -f {{ openness_dir }}/crd_local.yml"
  changed_when: true
  when: groups['edgenode_group'] | length > 0

- name: remove temp crd_local.yml
  file:
    path: "{{ openness_dir }}/crd_local.yml"
    state: absent

- name: wait for OVS & OVN databases
  block:
    - name: wait for running ovs-ovn & ovn-central pods
      shell: >
        set -o pipefail &&
        kubectl get pods -n kube-system
        -o custom-columns=NAME:.metadata.name,STATUS:.status.phase --no-headers
        --field-selector spec.nodeName={{ node_name }} | grep -E "ovs-ovn|ovn-central"
      register: kubeovn_pods
      retries: 30
      delay: 30
      until:
        - kubeovn_pods.stdout_lines | length == 2
        - kubeovn_pods.stdout_lines[0].find("Running") != -1
        - kubeovn_pods.stdout_lines[1].find("Running") != -1
      changed_when: false

    - name: waiting for OVS DB socket
      wait_for:
        path: /run/openvswitch/db.sock #/var/run/openvswitch/db.sock
        timeout: 300
  rescue:
    - name: events of ovs-ovn & ovn-central pods
      shell: >
        set -o pipefail &&
        kubectl describe pod -n kube-system $(kubectl get pods -n kube-system -o custom-columns=NAME:.metadata.name | grep {{ item }}) |
        sed -n '/^Events:/,//p'
      changed_when: false
      ignore_errors: true
      with_items:
        - ovs-ovn
        - ovn-central
    - name: try to get ovs-ovn execution logs
      shell: >
        set -o pipefail &&
        kubectl logs -n kube-system $(kubectl get pods -n kube-system -o custom-columns=NAME:.metadata.name | grep {{ item }})
      changed_when: false
      ignore_errors: true
      with_items:
        - ovs-ovn
        - ovn-central
    - name: end the playbook
      fail:
        msg: "end the playbook: either ovs-ovn or ovn-central pod did not start or the socket was not created"

- name: add local-ovs-phy port to local switch
  command: "ovn-nbctl --may-exist lsp-add {{ item }}-local {{ item }}-ovs-phy"
  register: result
  until: not result.failed
  retries: 20
  delay: 30
  changed_when: true
  with_items: "{{ groups['edgenode_group'] }}"
  when: groups['edgenode_group'] | length > 0

- name: configure local-ovs-phy port
  shell: |
    ovn-nbctl lsp-set-addresses "{{ item }}"-ovs-phy unknown
    ovn-nbctl lsp-set-type "{{ item }}"-ovs-phy localnet
    ovn-nbctl lsp-set-options "{{ item }}"-ovs-phy network_name="{{ item }}"-local-network
  changed_when: true
  with_items: "{{ groups['edgenode_group'] }}"
  when: groups['edgenode_group'] | length > 0

- name: configure OVS for single node deployment
  shell: |
    ovs-vsctl set open . external-ids:ovn-bridge-mappings="{{ item }}"-local-network:br-local
    ovs-vsctl --may-exist add-br br-local
  register: result
  until: not result.failed
  retries: 5
  delay: 60
  changed_when: true
  with_items: "{{ groups['edgenode_group'] }}"
  when: single_node_deployment | default(false)
