# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---
- name: open calico firewall rules
  ignore_errors: yes
  firewalld:
    port: 179/tcp
    permanent: yes
    state: enabled
    immediate: yes
  become: yes
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/python3' if ansible_distribution == 'Ubuntu' else '/usr/bin/python2' }}"

# Starting with calico v3.16 the CNI is adding an accept rule at the end of FORWARD chain in filter table:
# "Connections to services without endpoints are now properly rejected in iptables dataplane mode.
#  The fix required moving the iptables ACCEPT rule to the end of the filter FORWARD chain;
#  if you have your own rules in that chain then please check that they do not drop or reject pod traffic before it reaches the ACCEPT rule.
#  felix #2424 (@caseydavenport)" ~ https://docs.projectcalico.org/release-notes/
# This is not acceptable as prior to that the firewall adds REJECT all rule:
#   Chain FORWARD (policy ACCEPT)
#   target     prot opt source               destination
#   ...
#   DROP       all  --  anywhere             anywhere             ctstate INVALID
#   REJECT     all  --  anywhere             anywhere             reject-with icmp-host-prohibited
#   ACCEPT     all  --  anywhere             anywhere             /* cali:S93hcgKJrXEqnTfs */ /* Policy explicitly accepted packet. */ mark match 0x10000/0x10000
# The workaround is to add a direct accept rule that is the same as the one created by calico.
# By default the value created by https://github.com/projectcalico/felix/blob/29a934e2af1d6670d0c85cae7a844cef8eb4df93/dataplane/driver.go#L98
# is always 0x10000 as the default value of allowedMarkBits/configParams.IptablesMarkMask is 0xffff0000 and it is the first bit available
- name: add firewall rules for calico
  command: "{{ item }}"
  with_items:
    - firewall-cmd --direct --permanent --add-rule ipv4 filter FORWARD 0 -m mark --mark 0x10000/0x10000 -m comment --comment "OpenNESS-Calico" -j ACCEPT
    - firewall-cmd --reload
  ignore_errors: yes
  changed_when: true
  become: yes

- name: add NetworkManager config - ignore calico's interfaces
  copy:
    dest: /etc/NetworkManager/conf.d/calico.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:tunl*
  become: yes

- name: create temp dir
  tempfile:
    state: directory
    suffix: -calico
  register: tmp_dir

- name: download calico yml
  get_url:
    url: "{{ 'https://' + hostvars[groups['controller_group'][0]]['ansible_host'] + '/' + _calico_manifest if offline_enable else _calico_url }}"
    dest: "{{ tmp_dir.path }}/calico.yml"
  register: result
  retries: "{{ number_of_retries }}"
  until: result is succeeded
  delay: "{{ retry_delay }}"

- name: copy kustomization.yml
  copy:
    src: "{{ item }}"
    dest: "{{ tmp_dir.path }}"
  with_items:
    - kustomization.yml
    - customize_calico_container.yml

- name: Overwrite kustomization_ebpf.yml for ebpf
  copy:
    src: "kustomization_ebpf.yml"
    dest: "{{ tmp_dir.path }}/kustomization.yml"
  when: calico_ebpf_enabled

- name: create kustomization files from templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ tmp_dir.path }}/{{ item }}"
  with_items:
    - customize_calico_conf.yml
    - change_cidr.yml

- name: Add Kubernetes service host to the calico configmap
  block:
    - name: get the endpoint IP
      shell: kubectl  get endpoints | grep kuber | awk 'BEGIN { FS = "[ ]+" } { print $2}' | awk -F ":" '{print $1}'
      args:
        warn: false
      register: endpoint_ip
    - name: get the endpoint Port
      shell: kubectl  get endpoints | grep kuber | awk 'BEGIN { FS = "[ ]+" } { print $2}' | awk -F ":" '{print $2}'
      args:
        warn: false
      register: endpoint_port
    - name: replace host line
      lineinfile:
        dest: "{{ tmp_dir.path }}/calico.yml"
        regexp: "^  kubernetes_service_host: (.*)$"
        line: '  kubernetes_service_host: "{{ endpoint_ip.stdout }}"'
        backrefs: yes
    - name: replace port line
      lineinfile:
        dest: "{{ tmp_dir.path }}/calico.yml"
        regexp: "^  kubernetes_service_port: (.*)$"
        line: '  kubernetes_service_port: "{{ endpoint_port.stdout }}"'
        backrefs: yes
    - name: disable kube-proxy
      shell: kubectl patch ds -n kube-system kube-proxy -p '{"spec":{"template":{"spec":{"nodeSelector":{"non-calico":"true"}}}}}'
      args:
        warn: false
  when: calico_ebpf_enabled

- name: apply calico.yml with change
  shell: >
    set -o pipefail &&
    kubectl kustomize . | kubectl apply -f -
  args:
    chdir: "{{ tmp_dir.path }}"
  changed_when: true

- name: apply NetworkAttachmentDefinition
  block:
    - name: copy NetworkAttachmentDefinition to remote from template
      template:
        src: calico_net_attach_def.yml.j2
        dest: "{{ tmp_dir.path }}/calico_net_attach_def.yml"
    - name: apply Calico's NetworkAttachmentDefinition
      command: kubectl apply -f {{ tmp_dir.path }}/calico_net_attach_def.yml
  when:
    - apply_netdef is defined
    - apply_netdef
    - not ( calico_ebpf_enabled )
