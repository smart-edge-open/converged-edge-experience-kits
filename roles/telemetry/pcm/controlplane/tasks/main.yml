# SPDX-License-Identifier: Apache-2.0
# Copyright (c) 2020 Intel Corporation

---

- name: include certs variables
  include_vars: ../../../certs/defaults/main.yml

- name: include grafana variables
  include_vars: ../../../grafana/defaults/main.yml

- name: create telemetry namespace if needed
  block:
  - name: check if telemetry namespace exists
    command: kubectl get ns telemetry
    ignore_errors: yes
    register: get_ns_telemetry
  - name: create telemetry namespace
    command: kubectl create namespace telemetry
    when: get_ns_telemetry.rc == 1

- name: open port for pcm
  ignore_errors: yes
  firewalld:
    port: 9739/tcp
    permanent: yes
    state: enabled
    immediate: yes
  become: yes
  vars:
    ansible_python_interpreter: "{{ '/usr/bin/python3' if ansible_distribution == 'Ubuntu' else '/usr/bin/python2' }}"

- name: check if pcm already exists
  command: helm status pcm --namespace telemetry
  ignore_errors: yes
  changed_when: False
  register: get_pcm

- name: change pcm pullPolicy for offline
  set_fact:
    _pcm_pullPolicy: "IfNotPresent"
  when: offline_enable

- name: install pcm with Helm chart
  block:
  - name: copy Helm chart to the master node
    copy:
      src: "{{ role_path }}/charts/"
      dest: "{{ _pcm_chart_dir }}"
  - name: install pcm using Helm
    command: >
      helm install pcm --namespace telemetry "{{ _pcm_chart_dir }}"
      --set pcm.pullPolicy="{{ _pcm_pullPolicy }}"
    changed_when: true
  when: get_pcm.rc != 0

- name: wait for pcm pods to be ready
  command: >
    kubectl wait --field-selector=spec.nodeName={{ hostvars[item]['ansible_nodename'] }}
    --namespace=telemetry --for=condition=Ready pods --selector=app=pcm --timeout=600s
  changed_when: false
  with_inventory_hostnames:
  - controller_group

- name: get pcm dashboards from controller
  get_url:
    url: "https://{{ hostvars[item]['ansible_host'] }}:32100/dashboard/prometheus"
    dest: "{{ _grafana_dashboards_conf }}/{{ hostvars[item]['ansible_nodename'] }}.json"
    use_proxy: false
    force: yes
    client_cert: "{{ _telemetry_certs_dest }}/pcm/cert.pem"
    client_key: "{{ _telemetry_certs_dest }}/pcm/key.pem"
    validate_certs: no
  with_inventory_hostnames:
  - controller_group

# This is for ensuring, that we don't get two same titles or UIDs
- name: add prefix to title in dashboard json files
  replace:
    path: "{{ _grafana_dashboards_conf }}/{{ hostvars[item]['ansible_nodename'] }}.json"
    regexp: '  "title": "Processor Counter Monitor'
    replace: '  "title": "{{ hostvars[item]["ansible_nodename"] }} - Processor Counter Monitor'
  with_inventory_hostnames:
  - controller_group

- name: add prefix to UID in dashboard json files
  replace:
    path: "{{ _grafana_dashboards_conf }}/{{ hostvars[item]['ansible_nodename'] }}.json"
    regexp: '  "uid": "'
    replace: '  "uid": "{{ hostvars[item]["ansible_nodename"] }}-'
  with_inventory_hostnames:
  - controller_group

- name: add instance label to all metrics
  replace:
    path: "{{ _grafana_dashboards_conf }}/{{ hostvars[item]['ansible_nodename'] }}.json"
    regexp: '([a-zA-Z0-9_]+\{)'
    replace: '\1instance=\"{{ hostvars[item]["ansible_nodename"] }}\",'
  with_inventory_hostnames:
  - controller_group

- name: change sample duration time for all metrics
  replace:
    path: "{{ _grafana_dashboards_conf }}/{{ hostvars[item]['ansible_nodename'] }}.json"
    regexp: '\[3s\]'
    replace: '[12s]'
  with_inventory_hostnames:
  - controller_group
